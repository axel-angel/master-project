> gen dataset
siamese1: gen_transfo_siamese1 (pair same sample translations, rest dissimilar)
siamese2: gen_transfo_siamese1 (pair all same transfo all label)
lecun_siamese1: gen_transfo_siamese2 (no neighbor translation appearing)
lecun_siamese2: gen_transfo_siamese2 (neighbor translation dissimilar)
> with balacing, non continuous sample translation
lecun_siamese3: gen_transfo_siamese2 (--pair-displaced)
lecun_siamese4: gen_transfo_siamese2 (no --pair-displaced)
lecun_siamese3b: train with m=10,5 -> diverged NaN (iter ~2k)
> select probabilistic: neighbor/translations k=1
lecun_siamese31: gen_transfo_siamese2 (no --pair-displaced)
lecun_siamese21: gen_transfo_siameseX 2a
> 2D
lecun_siamese2Da: gen_transfo_siameseX 2Da (sample cont shift, sample with neigh all shift, sample with not neigh all same-shift)
lecun_siamese2Db: gen_transfo_siameseX 2Db (sample with all neigh shift, sample with no-neigh diff-label same-shift, sample with no-neigh diff-label diff-shift)
# train3k neights_v2, b2 (new version), pairing like lecun but dissimilar is probabilistic
lecun_siamese2bv2: use lecun_siameseX b2 (forgot --pair-displaced!)
lecun_siamese2bv3: use lecun_siameseX b2 (--pair-displaced)
lecun_siamese2bv4: use lecun_siameseX b2 (--shufle --pair-displaced --grouped 32)
lecun_siamese0: use lecun_siameseX 0, --shuffle --grouped 32
lecun_siamese0b: use lecun_siameseX 0, --shuffle --grouped 32
lecun_siamese2bv6: use lecun_siameseX b2, --pair-displaced --shuffle --grouped 32
lecun_siamese2Db2: X 2Db --shuffle --grouped 32
lecun_siamese2Dc: X 2Dc --shuffle --grouped 32
# train3k neights_v3, test2k neights_v3 (neigh ignore label)
lecun_siamese2bv5: use lecun_siameseX b2, --pair-displaced --shuffle
lecun_siamese0v2: use lecun_siameseX 0, --shuffle --grouped 32

# rotate train 3k neights_v2, test2k neights_v3, lecun model
lecun_siamese2bv6_rotate X 2b --shuffle --grouped 32 --pair-displaced --transfo-name rotate --transfo-values 45 90
lecun_siamese2Dc X 2Dc --shuffle --grouped 32 --transfo-name rotate --transfo-values 45 90
lecun_siamese2Dc2 X 2Dc --shuffle --shuffle-seed 43 --grouped 32 --transfo-name rotate --transfo-values 45 90
^ dropped

# fix xrange bugs, using lecun archi, use neights_v2
lecun_siamese0c: X 0, --shuffle --grouped 32 --transfo-name shift_x --transfo-values 3 6
lecun_siamese2bv7: X b2, --pair-displaced --shuffle --grouped 32 --transfo-name shift_x --transfo-values 3 6
lecun_siamese2Dc3: X 2Dc --shuffle --grouped 32 --transfo-name shift_x --transfo-values 3 6
lecun_siamese2Dc3_rotate: X 2Dc --shuffle --grouped 32 --transfo-name rotate --transfo-values 45 90
lecun_siamese2bv7_rotate: X 2b --shuffle --grouped 32 --pair-displaced --transfo-name rotate --transfo-values 45 90


> replication of lecun
lecun_siamese0c
lecun_siamese2bv7_rotate
> our result
lecun_siamese2Dc3
lecun_siamese2Dc3_rotate
lecun_siamese2Dc3_split_{digit,transfo} (split digit/transfo into 2 models)
lecun_siamese3Dc3: use 2D contrastive in 3D (2D=label, 1D=transfo)

> compare two contrastive models (against double contrastive)
lecun_siamese2Dc3_digit << TODO
lecun_siamese2Dc3_transfo << TODO

> models
lecun_siamese2b: use lecun_siamese2, random seed 43
aligner1: use siamese1, diverged -NaN
lecun_siamese0b: archi mnist_lecun_siamese.prototxt
lecun_siamese2Db2: archi mnist_lecun_siamese.prototxt DoubleContrastive
lecun_siamese2Dc: archi mnist_lecun_siamese.prototxt DoubleContrastive
